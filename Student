import java.io.*;
import java.util.*;

/**
 * Student class represents a student's data model.
 */
class Student {
    private String id;
    private String name;
    private int age;

    public Student(String id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    public String getId() {
        return id;
    }

    public static Student fromString(String line) {
        String[] parts = line.split(",");
        if (parts.length == 3) {
            return new Student(parts[0], parts[1], Integer.parseInt(parts[2]));
        }
        return null;
    }

    @Override
    public String toString() {
        return id + "," + name + "," + age;
    }

    public void display() {
        System.out.printf("ID: %-10s Name: %-20s Age: %-5d%n", id, name, age);
    }
}

/**
 * FileManager handles file read/write operations.
 */
class FileManager {
    private static final String FILE_NAME = "students.txt";

    public static void saveStudent(Student student) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME, true))) {
            writer.write(student.toString());
            writer.newLine();
        }
    }

    public static List<Student> readAllStudents() throws IOException {
        List<Student> students = new ArrayList<>();
        File file = new File(FILE_NAME);
        if (!file.exists()) return students;

        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromString(line);
                if (student != null) students.add(student);
            }
        }
        return students;
    }

    public static boolean deleteStudentById(String id) throws IOException {
        List<Student> students = readAllStudents();
        boolean removed = students.removeIf(s -> s.getId().equals(id));

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Student s : students) {
                writer.write(s.toString());
                writer.newLine();
            }
        }
        return removed;
    }
}

/**
 * Main class that handles the console-based UI.
 */
public class StudentRecordManager {

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        int choice;
        do {
            showMenu();
            choice = getChoice();
            handleChoice(choice);
        } while (choice != 4);
    }

    private static void showMenu() {
        System.out.println("\n===== Student Record Manager =====");
        System.out.println("1. Add Student");
        System.out.println("2. View All Students");
        System.out.println("3. Delete Student");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    private static int getChoice() {
        try {
            return Integer.parseInt(scanner.nextLine());
        } catch (NumberFormatException e) {
            return -1; // Invalid
        }
    }

    private static void handleChoice(int choice) {
        switch (choice) {
            case 1 -> addStudent();
            case 2 -> viewAllStudents();
            case 3 -> deleteStudent();
            case 4 -> System.out.println("Thank you for using the system.");
            default -> System.out.println("⚠ Invalid choice. Please try again.");
        }
    }

    private static void addStudent() {
        try {
            System.out.print("Enter ID: ");
            String id = scanner.nextLine().trim();
            System.out.print("Enter Name: ");
            String name = scanner.nextLine().trim();
            System.out.print("Enter Age: ");
            int age = Integer.parseInt(scanner.nextLine());

            Student student = new Student(id, name, age);
            FileManager.saveStudent(student);
            System.out.println("✅ Student added successfully.");
        } catch (Exception e) {
            System.out.println("❌ Error adding student. Please try again.");
        }
    }

    private static void viewAllStudents() {
        try {
            List<Student> students = FileManager.readAllStudents();
            if (students.isEmpty()) {
                System.out.println("⚠ No student records found.");
            } else {
                System.out.println("\n--- All Student Records ---");
                students.forEach(Student::display);
            }
        } catch (IOException e) {
            System.out.println("❌ Failed to read student records.");
        }
    }

    private static void deleteStudent() {
        try {
            System.out.print("Enter ID to delete: ");
            String id = scanner.nextLine().trim();
            boolean deleted = FileManager.deleteStudentById(id);
            if (deleted) {
                System.out.println("✅ Student deleted successfully.");
            } else {
                System.out.println("⚠ Student ID not found.");
            }
        } catch (IOException e) {
            System.out.println("❌ Failed to delete student.");
        }
    }
}
